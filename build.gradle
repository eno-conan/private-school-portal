plugins {
	id 'java'	
    id 'jacoco'
	id 'org.springframework.boot' version '3.0.4'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.school'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

allprojects {
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
        
    tasks.withType(Test) {
       systemProperty "file.encoding", "UTF-8"
    }
}

javadoc {
    options.encoding = 'UTF-8'
}

task myJavadocs(type: Javadoc) {    
    source = sourceSets.main.allJava
    options.memberLevel = JavadocMemberLevel.PRIVATE
    destinationDir = file("./doc/")
  }

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
	testImplementation ('org.springframework.boot:spring-boot-starter-test'){
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation "io.github.netmikey.logunit:logunit-core:1.1.3"
    testRuntimeOnly "io.github.netmikey.logunit:logunit-logback:1.1.3"
}

tasks.named('test') {
	useJUnitPlatform()
}
